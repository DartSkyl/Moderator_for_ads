import datetime
from utils import admin_router, queue_for_moderation, queue_for_publication
from keyboards import main_admin_keyboard, moderation_keyboard, admin_file, admin_back, channel_mang, rm_channel_keys
from states import ModerationAds
from loader import bot, db

from aiogram.types import Message, CallbackQuery
from aiogram import F, html
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.media_group import MediaGroupBuilder


async def moderation_func(msg: Message, state: FSMContext):
    ads_items = await state.get_data()
    ads_count = await queue_for_moderation.get_quantity()
    await msg.answer(text=f'–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n(–≤—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏ {ads_count}):',
                     reply_markup=moderation_keyboard, parse_mode='HTML')
    msg_with_time = f'–ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <b>{ads_items["public_time"]}</b>\n'
    if ads_items['mediafile']:  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –∑–Ω–∞—á–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–µ–∑ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        media_group = MediaGroupBuilder(caption=ads_items['text'])
        for mediafile in ads_items['mediafile']:
            media_group.add(type=mediafile[1], media=mediafile[0])
        await bot.send_media_group(chat_id=msg.from_user.id, media=media_group.build())

    else:
        await msg.answer(text=ads_items['text'])
    if ads_items['public_time'] != 'None':
        await msg.answer(text=msg_with_time, parse_mode='HTML')
    await state.set_state(ModerationAds.mod_preview)


@admin_router.message(Command('start'))
async def start_function(msg: Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ –∏ –≤–≤–æ–¥–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await state.clear()
    await msg.answer(
        text=f'–ü—Ä–∏–≤–µ—Ç, {html.quote(msg.from_user.first_name)}!\n–ñ–¥—É –≤–∞—à–∏—Ö —Ä–µ—à–µ–Ω–∏–πüòâ',
        reply_markup=main_admin_keyboard, parse_mode='HTML'
    )


@admin_router.message(F.text == 'üìã –û—á–µ—Ä–µ–¥—å –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é')
async def view_queue_for_moderation(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    # –î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –≤—Å–µ–≥–¥–∞ (–µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–∞–º –Ω–µ –ø—É—Å—Ç–æ) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ!
    ads = await queue_for_moderation.get_ads_from_queue()
    if isinstance(ads, str):
        await msg.answer(text=ads, reply_markup=main_admin_keyboard, parse_mode='HTML')
        await state.clear()
    else:
        await state.set_state(ModerationAds.mod_preview)
        await state.set_data({
            'container_id': ads.container_id,
            'text': ads.text,
            'user_id': ads.user_id,
            'mediafile': ads.file_id,
            'public_time': ads.public_time,
            'public_channel': ads.public_channel
        })
        await moderation_func(msg=msg, state=state)


@admin_router.message(ModerationAds.mod_preview, F.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é')
async def send_to_publication_queue(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é"""
    ads_items = await state.get_data()
    await queue_for_publication.add_ads_in_queue(
        container_id=ads_items['container_id'],
        text=ads_items['text'],
        user_id=ads_items['user_id'],
        mediafile=ads_items['mediafile'],
        public_time=ads_items['public_time'],
        public_channel=ads_items['public_channel'],
        time_index=int(datetime.datetime.strptime(ads_items['public_time'], "%H:%M %d.%m.%Y").timestamp())
        if ads_items['public_time'] != 'None' else None
    )
    await queue_for_moderation.remove_ads_from_queue(container_id=ads_items['container_id'])
    await db.remove_ads_mod(container_id=ads_items['container_id'])
    await msg.answer(text='–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é')
    await view_queue_for_moderation(msg, state)


@admin_router.message(ModerationAds.mod_preview, F.text == '–û—Ç–∫–∞–∑–∞—Ç—å –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')
async def refuse_publication(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    await msg.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∫–∞–∑—É:', reply_markup=admin_back, parse_mode='HTML')
    await state.set_state(ModerationAds.mod_refuse)


@admin_router.message(ModerationAds.mod_refuse, F.text != '–ù–∞–∑–∞–¥')
async def send_comment(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
    user_id = (await state.get_data())['user_id']
    ads_id = (await state.get_data())['container_id']
    await queue_for_moderation.remove_ads_from_queue(container_id=ads_id)
    standard_text = '–í—ã–º –±—ã–ª–æ –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –ø—Ä–∏—á–∏–Ω–µ:\n'
    await bot.send_message(chat_id=user_id, text=(standard_text + msg.text), parse_mode='HTML')
    await msg.answer(text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    await view_queue_for_moderation(msg, state)


@admin_router.message(ModerationAds.mod_preview, F.text != '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def moderation_text(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    actions = {
        '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç': (ModerationAds.mod_text, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç\n‚ùó–í—Å–µ —Å—Å—ã–ª–∫–∏ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—ã–º –∞–¥—Ä–µ—Å–æ–º‚ùó\n–ü—Ä–∏–º–µ—Ä: https://yandex.ru', admin_back),
        '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ': (ModerationAds.mod_mediafile, '–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–¥–æ 7 —Ñ–∞–π–ª–æ–≤) '
                                                                  '–∏/–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–∞–ª—å—à–µ ‚ñ∂Ô∏è"', admin_file),
        '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏': (ModerationAds.mod_time_for_publication, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n'
                                                                                   f'<b>{datetime.datetime.now().strftime("%H:%M %d.%m.%Y")}</b>', admin_back)
    }

    await state.set_state(actions[msg.text][0])
    await msg.answer(text=actions[msg.text][1], reply_markup=actions[msg.text][2], parse_mode='HTML')
    if msg.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ':
        # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç,
        # —Ç–æ –≤–µ—Ä–Ω–µ–º —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–æ –∏–∑ backup
        backup = (await state.get_data())['mediafile']
        await state.update_data({'backup': backup})
        await state.update_data({'mediafile': []})


@admin_router.message(F.text.in_(('–ù–∞–∑–∞–¥', '‚óÄÔ∏è –ù–∞–∑–∞–¥')))
async def back_func(msg: Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    if msg.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
        # –¢–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        # –∏ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –æ–Ω–∏ —Å—Ç–∏—Ä–∞—é—Ç—Å—è, —Ç–æ –≤ —Å–ª—É—á–∞–µ –æ—Ç–º–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤–µ—Ä–Ω–µ–º –∏—Ö –Ω–∞ –º–µ—Å—Ç–æ –∏–∑ backup
        backup = (await state.get_data())['backup']
        await state.update_data({'mediafile': backup})
    await state.set_state(ModerationAds.mod_preview)
    await moderation_func(msg, state)


@admin_router.message(ModerationAds.mod_text)
async def edit_text_func(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    if len(msg.text) > 1000:
        await msg.answer(f'–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è 1000 —Å–∏–º–≤–æ–ª–æ–≤ '
                         f'(–í—ã –≤–≤–µ–ª–∏ {len(msg.text)} —Å–∏–º–≤–æ–ª–∞).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', parse_mode='HTML')
    else:
        await state.update_data({'text': msg.md_text})
        await msg.answer(text='–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω!', parse_mode='HTML')
        await state.set_state(ModerationAds.mod_preview)
        await moderation_func(msg, state)


@admin_router.message(ModerationAds.mod_mediafile, F.text != '–î–∞–ª—å—à–µ ‚ñ∂Ô∏è')
async def edit_mediafile(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã"""
    file_id_list = (await state.get_data())['mediafile']

    if msg.photo:
        file_id_list.append((msg.photo[-1].file_id, 'photo'))
    elif msg.video:
        file_id_list.append((msg.video.file_id, 'video'))

    await state.update_data({'mediafile': file_id_list})


@admin_router.message(ModerationAds.mod_mediafile, F.text == '–î–∞–ª—å—à–µ ‚ñ∂Ô∏è')
async def edit_mediafile2(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è"""
    file_id_list = (await state.get_data())['mediafile']
    # —Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –±—ã —Ñ–∞–π–ª–æ–≤ –±—ã–ª–æ –Ω–µ –±–æ–ª—å—à–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ
    if len(file_id_list) > 7:
        await msg.answer(text='–§–∞–ª–æ–≤ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', reply_markup=admin_file, parse_mode='HTML')
        await state.update_data({'mediafile': []})
    else:
        await msg.answer(text='–§–æ—Ç–æ/–í–∏–¥–µ–æ –∏–∑–º–µ–Ω–µ–Ω–æ!', parse_mode='HTML')
        await state.set_state(ModerationAds.mod_preview)
        await moderation_func(msg, state)


@admin_router.message(ModerationAds.mod_time_for_publication, F.text.regexp(r'\d{1,2}[:]\d{2}\s\d{1,2}.\d{1,2}.\d{4}$'))
async def edit_time_for_publication(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    await state.update_data({'public_time': msg.text})
    await state.set_state(ModerationAds.mod_preview)
    await moderation_func(msg, state)


@admin_router.message(F.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def return_to_the_main_menu(msg: Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await msg.answer(text='–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_admin_keyboard)
    await state.clear()


# ====================
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π
# ====================


@admin_router.message(F.text == 'üì£ –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π')
async def channels_menu(msg: Message):
    """–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    await msg.answer('–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=channel_mang)


@admin_router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª')
async def adding_channels_start(msg: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    await state.set_state(ModerationAds.add_channel)
    await msg.answer('–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å')


@admin_router.message(ModerationAds.add_channel)
async def catch_new_channel(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    if msg.forward_from_chat:
        await db.add_new_channel(msg.forward_from_chat.id, msg.forward_from_chat.title)
        await state.clear()
        await msg.answer('–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=main_admin_keyboard)


@admin_router.message(F.text == '–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª')
async def open_remove_menu(msg: Message):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
    all_channels = await db.get_channels()
    await msg.answer('–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', reply_markup=await rm_channel_keys(all_channels))


@admin_router.callback_query(F.data.startswith('rm_id_'))
async def remove_channel_func(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    await callback.answer()
    await db.remove_channel(int(callback.data.replace('rm_id_', '')))
    await callback.message.answer('–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω', reply_markup=main_admin_keyboard)
