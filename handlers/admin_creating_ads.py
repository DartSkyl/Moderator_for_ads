import datetime
import asyncio
from random import choices
import string
from utils import admin_router, queue_for_publication
from keyboards import (main_admin_keyboard, admin_cancel, admin_file, admin_back,
                       admin_file_2, admin_preview_keyboard, channels_choice_keys,
                       admin_create_file, admin_no_time)
from states import AdminCreated
from loader import bot, db

from aiogram.types import Message, CallbackQuery
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.utils.media_group import MediaGroupBuilder
import arrow


async def preview_func(msg: Message, state: FSMContext):
    ads_items = await state.get_data()

    await msg.answer(text='–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:', reply_markup=admin_preview_keyboard)
    msg_with_time = f'–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <b>{ads_items["public_time"]}</b>\n'
    if len(ads_items['mediafile']) > 0:  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –∑–Ω–∞—á–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–µ–∑ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        media_group = MediaGroupBuilder(caption=ads_items['text'])
        for mediafile in ads_items['mediafile']:
            media_group.add(type=mediafile[1], media=mediafile[0])
        await bot.send_media_group(chat_id=msg.from_user.id, media=media_group.build())

    else:
        await msg.answer(text=ads_items['text'])

    if ads_items['public_time'] != 'None':
        await msg.answer(text=msg_with_time, parse_mode='HTML')
    await state.set_state(AdminCreated.preview)


@admin_router.message(F.text == 'üö´ –û—Ç–º–µ–Ω–∞')
async def cancel(msg: Message, state: FSMContext):
    """–ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã"""
    await msg.answer(text='–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=main_admin_keyboard)
    await state.clear()


@admin_router.message(F.text == 'üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç')
async def started_creating_ads(msg: Message, state: FSMContext):
    """–î–∞–Ω–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    await state.set_state(AdminCreated.adding_text)
    await msg.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –±—É–¥—É—â–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–∞)',
                     reply_markup=admin_cancel, parse_mode='HTML')


@admin_router.message(AdminCreated.adding_text, F.text != 'üö´ –û—Ç–º–µ–Ω–∞')
async def adding_time_or_file(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç, –∞ –¥–∞–ª–µ–µ –ª–∏–±–æ –≤–≤–æ–¥–∏—Ç—Å—è –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –ª–∏–±–æ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Ñ–∞–π–ª—ã"""

    # –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–ª–∏–Ω–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(msg.text) > 1000:
        await state.set_state(AdminCreated.false_state)  # –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –∫–æ–≥–¥–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º —Ä–∞–∑–æ–±—å–µ—Ç
        # —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—Ç–æ—Ä–æ–µ
        await msg.answer(f'–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è 1000 —Å–∏–º–≤–æ–ª–æ–≤ '
                         f'(–í—ã –≤–≤–µ–ª–∏ {len(msg.text)} —Å–∏–º–≤–æ–ª–∞).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', parse_mode='HTML')
        await asyncio.sleep(1)
        await state.set_state(AdminCreated.adding_text)  # –ò —Å—Ä–∞–∑—É —É—Å—Ç–∞–Ω–æ–≤–∏–º —Å—Ç—ç–π—Ç –æ–±—Ä–∞—Ç–Ω–æ,
        # —á—Ç–æ –±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

    else:
        await msg.answer(text='–¢–µ–ø–µ—Ä—å —Å–∫–∏–Ω—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–¥–æ 7 —Ñ–∞–π–ª–æ–≤) –∏/–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–∞–ª—å—à–µ ‚ñ∂Ô∏è"',
                         reply_markup=admin_create_file, parse_mode='HTML')
        await state.set_state(AdminCreated.adding_mediafile)
        await state.update_data({'mediafile': []})

        await state.update_data({'text': msg.md_text, 'user_id': msg.from_user.id})


@admin_router.message(AdminCreated.adding_mediafile, F.text != '–î–∞–ª—å—à–µ ‚ñ∂Ô∏è')
async def mediafile_input(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã"""

    # –¢–∞–∫ –∫–∞–∫, –ø—Ä–∏ —Å–∫–∏–¥—ã–≤–∞–Ω–∏–∏ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –±–æ—Ç –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç—Ç–æ –∫–∞–∫ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö
    # —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –ø—Ä–∏—á—É–¥–ª–∏–≤—É—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å –∑–∞—Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º

    file_id_list = (await state.get_data())['mediafile']

    if msg.photo:
        file_id_list.append((msg.photo[-1].file_id, 'photo'))
    elif msg.video:
        file_id_list.append((msg.video.file_id, 'video'))

    await state.update_data({'mediafile': file_id_list})


@admin_router.message(AdminCreated.adding_mediafile, F.text == '–î–∞–ª—å—à–µ ‚ñ∂Ô∏è')
async def end_mediafile_input(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –ª–æ–≤–ª—é —Ñ–∞–π–ª–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    file_id_list = (await state.get_data())['mediafile']
    # —Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –±—ã —Ñ–∞–π–ª–æ–≤ –±—ã–ª–æ –Ω–µ –±–æ–ª—å—à–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ
    if len(file_id_list) > 7:
        await msg.answer(text='–§–∞–ª–æ–≤ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', reply_markup=admin_file, parse_mode='HTML')
        await state.update_data({'mediafile': []})
    else:
        await msg.answer(text="–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                              f"<code>{arrow.utcnow().now().strftime('%H:%M %d.%m.%Y')}</code>\n\n"
                              f"–ì–æ—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n"
                              f"<code>{arrow.utcnow().now().shift(days=1).strftime('%H:%M %d.%m.%Y')}</code> - —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏\n"
                              f"<code>{arrow.utcnow().now().shift(hours=1).strftime('%H:%M %d.%m.%Y')}</code> - —á–µ—Ä–µ–∑ —á–∞—Å\n"
                              f"<code>{arrow.utcnow().now().shift(minutes=10).strftime('%H:%M %d.%m.%Y')}</code> - —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç\n\n"
                              f"–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É</b>",
                         reply_markup=admin_no_time, parse_mode='HTML')
        await state.set_state(AdminCreated.time_for_publication)


@admin_router.message(AdminCreated.time_for_publication,
                      F.text.regexp(r'\d{1,2}[:]\d{2}\s\d{1,2}.\d{1,2}.\d{4}$'))
async def setting_the_desired_time(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∂–µ–ª–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    await state.update_data({'public_time': msg.text})
    public_channels = await db.get_channels()
    await state.set_state(AdminCreated.channel_choice)
    await msg.answer('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:',
                     reply_markup=await channels_choice_keys(public_channels))
    # await state.set_state(AdminCreated.preview)
    # await preview_func(msg, state)


@admin_router.message(AdminCreated.time_for_publication, F.text == '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É')
async def time_error_input(msg: Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    await state.update_data({'public_time': 'None'})
    public_channels = await db.get_channels()
    await state.set_state(AdminCreated.channel_choice)
    await msg.answer('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:',
                     reply_markup=await channels_choice_keys(public_channels))
    # await state.set_state(AdminCreated.preview)
    # await preview_func(msg, state)


@admin_router.callback_query(AdminCreated.channel_choice, F.data.startswith('ch_id_'))
async def catch_channel(callback: CallbackQuery, state: FSMContext):
    """–õ–æ–≤–∏–º –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    await callback.answer()
    await state.update_data({'public_channel': int(callback.data.replace('ch_id_', ''))})
    await state.set_state(AdminCreated.preview)
    await preview_func(callback.message, state)


@admin_router.message(AdminCreated.preview, F.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é')
async def send_to_publication_queue(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é"""
    ads_items = await state.get_data()
    generate_id = ''.join(choices(string.digits + string.ascii_letters, k=8))
    await queue_for_publication.add_ads_in_queue(
        container_id=generate_id,
        text=ads_items['text'],
        user_id=ads_items['user_id'],
        mediafile=ads_items['mediafile'],
        public_time=ads_items['public_time'],
        public_channel=ads_items['public_channel'],
        time_index=int(datetime.datetime.strptime(ads_items['public_time'], "%H:%M %d.%m.%Y").timestamp())
        if ads_items['public_time'] != 'None' else None
    )
    await msg.answer(text='–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é', reply_markup=main_admin_keyboard)
    await state.clear()


@admin_router.message(AdminCreated.preview, F.text == '–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ')
async def delete_created_ads(msg: Message, state: FSMContext):
    """–î–∞–Ω–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä —É–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
    await msg.answer(text='–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!', reply_markup=main_admin_keyboard, parse_mode='HTML')
    await state.clear()


@admin_router.message(AdminCreated.preview)
async def action_after_preview(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    actions = {
        '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç': (AdminCreated.edit_text, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç\n‚ùó–í—Å–µ —Å—Å—ã–ª–∫–∏ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—ã–º –∞–¥—Ä–µ—Å–æ–º‚ùó\n–ü—Ä–∏–º–µ—Ä: https://yandex.ru', admin_back),
        '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ': (AdminCreated.edit_mediafile, '–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–¥–æ 7 —Ñ–∞–π–ª–æ–≤) '
                                                                  '–∏/–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–∞–ª—å—à–µ ‚ñ∂Ô∏è"', admin_file_2),
        '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏': (AdminCreated.edit_time_for_publication, '–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n'
                                                                                   f'<b>{datetime.datetime.now().strftime("%H:%M %d.%m.%Y")}</b>',
                                           admin_back),
    }

    await state.set_state(actions[msg.text][0])
    await msg.answer(text=actions[msg.text][1], reply_markup=actions[msg.text][2], parse_mode='HTML')
    if msg.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ':
        # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç,
        # —Ç–æ –≤–µ—Ä–Ω–µ–º —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–æ –∏–∑ backup
        backup = (await state.get_data())['mediafile']
        await state.update_data({'backup': backup})
        await state.update_data({'mediafile': []})


@admin_router.message(F.text.in_(('–ù–∞–∑–∞–¥', '‚óÄÔ∏è –ù–∞–∑–∞–¥')))
async def back_func(msg: Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    if msg.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
        # –¢–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        # –∏ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –æ–Ω–∏ —Å—Ç–∏—Ä–∞—é—Ç—Å—è, —Ç–æ –≤ —Å–ª—É—á–∞–µ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ—Ä–Ω–µ–º –∏—Ö –Ω–∞ –º–µ—Å—Ç–æ –∏–∑ backup
        backup = (await state.get_data())['backup']
        await state.update_data({'mediafile': backup})
    await state.set_state(AdminCreated.preview)
    await preview_func(msg, state)


@admin_router.message(AdminCreated.edit_text)
async def edit_text_func(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    if len(msg.text) > 1000:
        await msg.answer(f'–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è 1000 —Å–∏–º–≤–æ–ª–æ–≤ '
                         f'(–í—ã –≤–≤–µ–ª–∏ {len(msg.text)} —Å–∏–º–≤–æ–ª–∞).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', parse_mode='HTML')
    else:
        await state.update_data({'text': msg.md_text})
        await msg.answer(text='–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω!', parse_mode='HTML')
        await state.set_state(AdminCreated.preview)
        await preview_func(msg, state)


@admin_router.message(AdminCreated.edit_mediafile, F.text != '–î–∞–ª—å—à–µ ‚ñ∂Ô∏è')
async def edit_mediafile(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã"""
    file_id_list = (await state.get_data())['mediafile']

    if msg.photo:
        file_id_list.append((msg.photo[-1].file_id, 'photo'))
    elif msg.video:
        file_id_list.append((msg.video.file_id, 'video'))

    await state.update_data({'mediafile': file_id_list})


@admin_router.message(AdminCreated.edit_mediafile, F.text == '–î–∞–ª—å—à–µ ‚ñ∂Ô∏è')
async def edit_mediafile2(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è"""
    file_id_list = (await state.get_data())['mediafile']
    # —Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –±—ã —Ñ–∞–π–ª–æ–≤ –±—ã–ª–æ –Ω–µ –±–æ–ª—å—à–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ
    if len(file_id_list) > 7:
        await msg.answer(text='–§–∞–ª–æ–≤ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', reply_markup=admin_file_2, parse_mode='HTML')
        await state.update_data({'mediafile': []})
    else:
        await msg.answer(text='–§–æ—Ç–æ/–í–∏–¥–µ–æ –∏–∑–º–µ–Ω–µ–Ω–æ!', parse_mode='HTML')
        await state.set_state(AdminCreated.preview)
        await preview_func(msg, state)


@admin_router.message(AdminCreated.edit_time_for_publication, F.text.regexp(r'\d{1,2}[:]\d{2}\s\d{1,2}.\d{1,2}.\d{4}$'))
async def edit_time_for_publication(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    await state.update_data({'public_time': msg.text})
    await state.set_state(AdminCreated.preview)
    await preview_func(msg, state)
