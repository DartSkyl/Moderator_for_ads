import datetime
from utils import admin_router, queue_for_publication
from keyboards import (main_admin_keyboard,
                       admin_file_2, admin_back_2, view_queue, edit_public_keyboard, confirm)
from states import ModerationAds
from loader import bot, db

from aiogram.types import Message
from aiogram import F, html
from aiogram.fsm.context import FSMContext
from aiogram.utils.media_group import MediaGroupBuilder


async def demonstrate_func(msg: Message, state: FSMContext, ads):
    """–ó–¥–µ—Å—å –º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–Ω–æ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é"""
    queue_info = await state.get_data()

    await msg.answer(text=f'–û–±—ä—è–≤–ª–µ–Ω–∏–µ {queue_info["page"]}/{queue_info["count"]}:',
                     reply_markup=view_queue, parse_mode='HTML')
    msg_with_time = f'–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <b>{ads.public_time}</b>\n'
    if ads.file_id:  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –∑–Ω–∞—á–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–µ–∑ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        media_group = MediaGroupBuilder(caption=html.quote(ads.text))
        for mediafile in ads.file_id:
            media_group.add(type=mediafile[1], media=mediafile[0])
        await bot.send_media_group(chat_id=msg.from_user.id, media=media_group.build())

    else:
        await msg.answer(text=html.quote(ads.text), parse_mode='HTML')
    if ads.public_time != 'None':
        await msg.answer(text=msg_with_time, parse_mode='HTML')
    await state.set_state(ModerationAds.pub_preview)


@admin_router.message(F.text == 'üì∞ –û—á–µ—Ä–µ–¥—å –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é')
async def view_queue_for_publication(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é"""
    ads_list = await queue_for_publication.get_ads_list()
    if not isinstance(ads_list, str):
        await state.set_state(ModerationAds.pub_preview)

        await state.set_data({
            'queue': ads_list,
            'page': 1,
            'count': len(ads_list)
        })
        await demonstrate_func(msg=msg, state=state, ads=ads_list[0])
    else:
        await msg.answer(text=ads_list, reply_markup=main_admin_keyboard, parse_mode='HTML')


@admin_router.message(ModerationAds.pub_preview, F.text == '–°–ª–µ–¥—É—é—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ‚ñ∂Ô∏è')
async def next_ads(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –º—ã –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
    queue_info = await state.get_data()
    try:
        if queue_info['count'] > queue_info['page']:
            await state.update_data({'page': queue_info['page'] + 1})

            # –ù–æ–º–µ—Ä –∏–Ω–¥–µ–∫—Å–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ä–∞–≤–µ–Ω –Ω–æ–º–µ—Ä—É –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –¢–∞–∫, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            await demonstrate_func(msg=msg, state=state, ads=queue_info['queue'][queue_info['page']])

        else:
            await msg.answer(text='–≠—Ç–æ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏!', parse_mode='HTML')
    except IndexError:
        await view_queue_for_publication(msg, state)


@admin_router.message(ModerationAds.pub_preview, F.text == '‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ')
async def previous_ads(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –º—ã –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
    queue_info = await state.get_data()
    if queue_info['page'] > 1:
        await state.update_data({'page': queue_info['page'] - 1})

        await demonstrate_func(msg=msg, state=state, ads=queue_info['queue'][queue_info['page'] - 2])

    else:
        await msg.answer(text='–≠—Ç–æ –Ω–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏!', parse_mode='HTML')


@admin_router.message(ModerationAds.pub_preview, F.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ')
async def edit_public_ads(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é"""
    queue_info = await state.get_data()
    ads = queue_info['queue'][queue_info['page'] - 1]

    # –°–æ—Ö—Ä–∞–Ω–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    await state.update_data({'edit_ads': ads})
    await msg.answer(text='–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º?', reply_markup=edit_public_keyboard, parse_mode='HTML')


@admin_router.message(ModerationAds.pub_preview, F.text != '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é')
async def moderation_text(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    actions = {
        '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç': (ModerationAds.pub_text, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç\n‚ùó–í—Å–µ —Å—Å—ã–ª–∫–∏ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—ã–º –∞–¥—Ä–µ—Å–æ–º‚ùó\n–ü—Ä–∏–º–µ—Ä: https://yandex.ru', admin_back_2),
        '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ': (ModerationAds.pub_mediafile, '–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–¥–æ 7 —Ñ–∞–π–ª–æ–≤) '
                                                                  '–∏/–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–∞–ª—å—à–µ ‚ñ∂Ô∏è"', admin_file_2),
        '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏': (ModerationAds.pub_time_for_publication, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n'
                                                                                   f'<b>{datetime.datetime.now().strftime("%H:%M %d.%m.%Y")}</b>', admin_back_2),
        '–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ': (ModerationAds.pub_delete, '–í—ã —É–≤–µ—Ä–µ–Ω—ã‚ùì', confirm)
    }

    await state.set_state(actions[msg.text][0])
    await msg.answer(text=actions[msg.text][1], reply_markup=actions[msg.text][2], parse_mode='HTML')
    if msg.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ':
        # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç,
        # —Ç–æ –≤–µ—Ä–Ω–µ–º —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–æ –∏–∑ backup
        backup = (await state.get_data())['edit_ads'].file_id
        await state.update_data({'backup': backup})
        (await state.get_data())['edit_ads'].file_id = []
        await state.update_data({'mediafile': []})


@admin_router.message(ModerationAds.pub_preview, F.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é')
async def return_to_pub_queue(msg: Message, state: FSMContext):
    await view_queue_for_publication(msg, state)


@admin_router.message(F.text.in_(('–í–µ—Ä–Ω—É—Ç—å—Å—è', '‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', '–ù–µ—Ç ‚ùå')))
async def back_func(msg: Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    edit_ads = (await state.get_data())['edit_ads']
    if msg.text == '‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è':
        # –¢–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        # –∏ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –æ–Ω–∏ —Å—Ç–∏—Ä–∞—é—Ç—Å—è, —Ç–æ –≤ —Å–ª—É—á–∞–µ –æ—Ç–º–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤–µ—Ä–Ω–µ–º –∏—Ö –Ω–∞ –º–µ—Å—Ç–æ –∏–∑ backup
        backup = (await state.get_data())['backup']
        edit_ads.file_id = backup
    await state.set_state(ModerationAds.pub_preview)
    await demonstrate_func(msg, state, edit_ads)


@admin_router.message(ModerationAds.pub_text)
async def edit_text_func(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    edit_ads = (await state.get_data())['edit_ads']
    edit_ads.text = msg.text
    await msg.answer(text='–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω!', parse_mode='HTML')
    await state.set_state(ModerationAds.pub_preview)
    await demonstrate_func(msg, state, edit_ads)


@admin_router.message(ModerationAds.pub_mediafile, F.text != '–î–∞–ª—å—à–µ ‚ñ∂Ô∏è')
async def edit_mediafile(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã"""
    file_id_list = (await state.get_data())['mediafile']

    if msg.photo:
        file_id_list.append((msg.photo[-1].file_id, 'photo'))
    elif msg.video:
        file_id_list.append((msg.video.file_id, 'video'))

    await state.update_data({'mediafile': file_id_list})


@admin_router.message(ModerationAds.pub_mediafile, F.text == '–î–∞–ª—å—à–µ ‚ñ∂Ô∏è')
async def edit_mediafile2(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è"""
    file_id_list = (await state.get_data())['mediafile']
    edit_ads = (await state.get_data())['edit_ads']
    # —Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –±—ã —Ñ–∞–π–ª–æ–≤ –±—ã–ª–æ –Ω–µ –±–æ–ª—å—à–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ
    if len(file_id_list) > 7:
        await msg.answer(text='–§–∞–ª–æ–≤ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', reply_markup=admin_file_2, parse_mode='HTML')
        await state.update_data({'mediafile': []})
    else:
        edit_ads.file_id = file_id_list
        await msg.answer(text='–§–æ—Ç–æ/–í–∏–¥–µ–æ –∏–∑–º–µ–Ω–µ–Ω–æ!', parse_mode='HTML')
        await state.set_state(ModerationAds.pub_preview)
        await demonstrate_func(msg, state, edit_ads)


@admin_router.message(ModerationAds.pub_time_for_publication, F.text.regexp(r'\d{1,2}[:]\d{2}\s\d{1,2}.\d{1,2}.\d{4}$'))
async def edit_time_for_publication(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    edit_ads = (await state.get_data())['edit_ads']
    edit_ads.public_time = msg.text
    edit_ads.time_index = int(datetime.datetime.strptime(msg.text, "%H:%M %d.%m.%Y").timestamp())
    await queue_for_publication.edit_time_for_publication(edit_ads)
    await state.set_state(ModerationAds.pub_preview)
    await demonstrate_func(msg, state, edit_ads)


@admin_router.message(ModerationAds.pub_delete, F.text == '‚úÖ –î–∞')
async def delete_ads(msg: Message, state: FSMContext):
    """–£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
    ads = (await state.get_data())['edit_ads']
    await queue_for_publication.remove_ads_container(ads)
    await db.remove_ads_pub(ads.container_id)
    await msg.answer(text='–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ')
    await view_queue_for_publication(msg, state)
