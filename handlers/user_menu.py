import asyncio
from utils import users_router, queue_for_moderation, ContainerForAds, editing_function
from keyboards import main_user_keyboard, user_cancel, preview_keyboard, user_file
from states import CreatingAds
from loader import bot

from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram import F, html
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from asyncpg.exceptions import UniqueViolationError
from aiogram.utils.media_group import MediaGroupBuilder


@users_router.message(Command('start'))
async def start_function(msg: Message):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ –∏ –≤–≤–æ–¥–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await msg.answer(text=f'–ü—Ä–∏–≤–µ—Ç, {html.quote(msg.from_user.first_name)}!\n–ñ–¥—É —Ç–≤–æ–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–πüòâ',
                     reply_markup=main_user_keyboard)


@users_router.message(F.text == 'üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ')
async def started_creating_ads(msg: Message, state: FSMContext):
    """–î–∞–Ω–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    await state.set_state(CreatingAds.adding_text)
    await msg.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –±—É–¥—É—â–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 1024 —Å–∏–º–≤–æ–ª–∞):',
                     reply_markup=user_cancel)


# @users_router.callback_query(CreatingAds.start_creating)
# async def adding_text(callback: CallbackQuery, state: FSMContext):
#     """–ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
#     await callback.answer()
#     await callback.message.delete()
#
#     content_type_dict = {'text': '3000', 'photo': '1000', 'video': '1000'}
#
#     if callback.data != 'cancel':
#         await callback.message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è '
#                                            f'(–º–∞–∫—Å–∏–º—É–º {content_type_dict[callback.data]} —Å–∏–º–≤–æ–ª–æ–≤)',
#                                       reply_markup=user_cancel)
#
#         await state.set_state(CreatingAds.adding_text)
#         await state.set_data({'content_type': callback.data, 'user_id': callback.from_user.id})
#
#     else:
#         await callback.message.answer(text='–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=main_user_keyboard)
#         await state.clear()


@users_router.message(CreatingAds.adding_text, F.text != 'üö´ –û—Ç–º–µ–Ω–∞')
async def adding_time_or_file(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç, –∞ –¥–∞–ª–µ–µ –ª–∏–±–æ –≤–≤–æ–¥–∏—Ç—Å—è –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –ª–∏–±–æ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Ñ–∞–π–ª—ã"""

    # content_type = (await state.get_data())['content_type']  # –°—Ä–∞–∑—É –≤—ã–≥—Ä—É–∑–∏–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # content_type_dict = {'text': 3000, 'photo': 1000, 'video': 1000}

    # –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–ª–∏–Ω–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(msg.text) > 1024:
        await state.set_state(CreatingAds.false_state)  # –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –∫–æ–≥–¥–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º —Ä–∞–∑–æ–±—å–µ—Ç
        # —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—Ç–æ—Ä–æ–µ
        await msg.answer(f'–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è 1024 —Å–∏–º–≤–æ–ª–æ–≤ '
                         f'(–í—ã –≤–≤–µ–ª–∏ {len(msg.text)} —Å–∏–º–≤–æ–ª–∞).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await asyncio.sleep(1)
        await state.set_state(CreatingAds.adding_text)  # –ò —Å—Ä–∞–∑—É —É—Å—Ç–∞–Ω–æ–≤–∏–º —Å—Ç—ç–π—Ç –æ–±—Ä–∞—Ç–Ω–æ,
        # —á—Ç–æ –±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

    else:
        #
        # if content_type == 'text':
        #     await msg.answer(text="–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        #                           "<b>11:00 13.03.2024</b>\n\n"
        #                           "‚ùó–£—á—Ç–∏—Ç–µ, —á—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è! –û—Å–æ–±–µ–Ω–Ω–æ, "
        #                           "–µ—Å–ª–∏ –∫ –º–æ–º–µ–Ω—Ç—É –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç–∞ —É–∂–µ –∏—Å—Ç–µ–∫—É—Ç‚ùó",
        #                      reply_markup=user_cancel)
        #     await state.set_state(CreatingAds.time_for_publication)

        # elif content_type in ['photo', 'video']:
        # await msg.answer(text='–¢–µ–ø–µ—Ä—å —Å–∫–∏–Ω—å—Ç–µ —Ñ–æ—Ç–æ (–¥–æ 7), –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–∞–ª—å—à–µ ‚ñ∂Ô∏è"'
        #                  if content_type == 'photo'
        #                  else '–¢–µ–ø–µ—Ä—å —Å–∫–∏–Ω—å—Ç–µ –≤–∏–¥–µ–æ (–¥–æ 7), –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–∞–ª—å—à–µ ‚ñ∂Ô∏è"')
        await msg.answer(text='–¢–µ–ø–µ—Ä—å —Å–∫–∏–Ω—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–¥–æ 7 —Ñ–∞–π–ª–æ–≤) –∏/–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–∞–ª—å—à–µ ‚ñ∂Ô∏è"',
                         reply_markup=user_file)
        await state.set_state(CreatingAds.adding_mediafile)
        await state.update_data({'mediafile': []})

        await state.update_data({'text': msg.text, 'user_id': msg.from_user.id})


@users_router.message(CreatingAds.adding_mediafile, F.text != '–î–∞–ª—å—à–µ ‚ñ∂Ô∏è')
async def mediafile_input(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã"""
    # content_type = (await state.get_data())['content_type']

    # –¢–∞–∫ –∫–∞–∫, –ø—Ä–∏ —Å–∫–∏–¥—ã–≤–∞–Ω–∏–∏ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –±–æ—Ç –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç—Ç–æ –∫–∞–∫ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö
    # —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –ø—Ä–∏—á—É–¥–ª–∏–≤—É—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å –∑–∞—Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º

    file_id_list = (await state.get_data())['mediafile']

    if msg.photo:
        file_id_list.append((msg.photo[-1].file_id, 'photo'))
    elif msg.video:
        file_id_list.append((msg.video.file_id, 'video'))

    await state.update_data({'mediafile': file_id_list})


@users_router.message(CreatingAds.adding_mediafile, F.text == '–î–∞–ª—å—à–µ ‚ñ∂Ô∏è')
async def end_mediafile_input(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –ª–æ–≤–ª—é —Ñ–∞–π–ª–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    file_id_list = (await state.get_data())['mediafile']
    # —Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –±—ã —Ñ–∞–π–ª–æ–≤ –±—ã–ª–æ –Ω–µ –±–æ–ª—å—à–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ
    if len(file_id_list) > 7:
        await msg.answer(text='–§–∞–ª–æ–≤ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', reply_markup=user_file)
        await state.update_data({'mediafile': []})
    else:
        await msg.answer(text="–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                              "<b>11:00 13.03.2024</b>\n\n"
                              "‚ùó–£—á—Ç–∏—Ç–µ, —á—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è! –û—Å–æ–±–µ–Ω–Ω–æ, "
                              "–µ—Å–ª–∏ –∫ –º–æ–º–µ–Ω—Ç—É –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç–∞ —É–∂–µ –∏—Å—Ç–µ–∫—É—Ç‚ùó",
                         reply_markup=user_cancel)
        await state.set_state(CreatingAds.time_for_publication)


@users_router.message(CreatingAds.time_for_publication,
                      F.text.regexp(r'\d{1,2}[:]\d{2}\s\d{1,2}.\d{1,2}.\d{4}$'), F.text != 'üö´ –û—Ç–º–µ–Ω–∞')
async def setting_the_desired_time(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∂–µ–ª–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    await state.update_data({'public_time': msg.text})
    await msg.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–æ—Ç 1 –¥–æ 30 —Å—É—Ç–æ–∫)', reply_markup=user_cancel)
    await state.set_state(CreatingAds.validity)


@users_router.message(CreatingAds.time_for_publication)
async def time_error_input(msg: Message):
    """–•—ç–Ω–¥–ª–µ—Ä –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    await msg.answer(text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –¥–∞—Ç—ã!\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É\n'
                          '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç <b>11:00 13.03.2024</b>')


@users_router.message(CreatingAds.validity, F.text.regexp(r'\d{1,2}'))
async def validity_input(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    if 1 <= int(msg.text) <= 30:
        await state.update_data({'validity': int(msg.text)})
        ads_items = await state.get_data()

        await msg.answer(text='–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:', reply_markup=preview_keyboard)
        msg_with_time = (f'–ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <b>{ads_items["public_time"]}</b>\n'
                         f'–ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è: <b>{msg.text}</b>')
        if len(ads_items['mediafile']) > 0:
            media_group = MediaGroupBuilder(caption=ads_items['text'])
            for mediafile in ads_items['mediafile']:
                media_group.add(type=mediafile[1], media=mediafile[0])
            await bot.send_media_group(chat_id=msg.from_user.id, media=media_group.build())

        else:
            await msg.answer(text=ads_items['text'])

        await msg.answer(text=msg_with_time)
        await state.set_state(CreatingAds.preview)

        # ads = ContainerForAds(
        #     text=ads_items['text'],
        #     user_id=ads_items['user_id'],
        #     public_time=ads_items['public_time'],
        #     validity=int(msg.text),
        #     file_id=ads_items['mediafile'] if len(ads_items['mediafile']) > 0 else None
        # )
        # # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        # await editing_function(ads=ads, from_user_id=msg.from_user.id)

        # ads_items = await state.get_data()
        # await queue_for_moderation.add_ads_in_queue(
        #     user_id=ads_items['user_id'],
        #     text=ads_items['text'],
        #     mediafile=ads_items['mediafile'],
        #     public_time=ads_items['public_time'],
        #     validity=ads_items['validity']
        # )
        # await msg.answer(text='–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!', reply_markup=main_user_keyboard)


@users_router.message(F.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é')
async def send_ads_for_moderation(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    ads_items = await state.get_data()
    await queue_for_moderation.add_ads_in_queue(
        user_id=ads_items['user_id'],
        text=ads_items['text'],
        mediafile=ads_items['mediafile'],
        public_time=ads_items['public_time'],
        validity=ads_items['validity']
    )
    await msg.answer(text='–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!', reply_markup=main_user_keyboard)


@users_router.message(F.text == '–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ')
async def delete_created_ads(msg: Message, state: FSMContext):
    """–î–∞–Ω–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä —É–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
    await msg.answer(text='–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!', reply_markup=main_user_keyboard)
    await state.clear()


@users_router.message(CreatingAds.preview)
async def action_after_preview(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    actions = {
        '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç': (CreatingAds.adding_text, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:'),
        '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ': (CreatingAds.edit_mediafile, '–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–¥–æ 7 —Ñ–∞–π–ª–æ–≤) '
                                                           '–∏/–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–∞–ª—å—à–µ ‚ñ∂Ô∏è"', user_file),
        '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏': (CreatingAds.edit_time_for_publication, '–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n'
                                                                                  '<b>11:00 13.03.2024</b>'),
        '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è': (CreatingAds.edit_validity, '–í–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è '
                                                                    '–æ–±—ä—è–≤–ª–µ–Ω–∏—è (–æ—Ç 1 –¥–æ 30 —Å—É—Ç–æ–∫)'),
    }

    await state.set_state(actions[msg.text][0])
    await msg.answer(text=actions[msg.text][1], reply_markup=actions[msg.text][2] if actions[msg.text][2] else None)


@users_router.message(F.text == 'üö´ –û—Ç–º–µ–Ω–∞')
async def cancel(msg: Message, state: FSMContext):
    """–ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã"""
    await msg.answer(text='–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=main_user_keyboard)
    await state.clear()
